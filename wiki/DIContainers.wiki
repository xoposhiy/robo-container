#summary Что такое DI-контейнер?

== Очень кратко ==

DI-контейнер позволяет на основе конфигурирования создавать граф объектов, необходимый для выполнения некоторой функции.

== Чуть подробнее ==
Некоторое время назад программисты начали задумываться о том, чтобы код, который они пишут, было просто тестировать. Сейчас такое стремление иногда называют Design for testability. Наиболее известное изобретение на этом направлении — Test Driven Development. 
Основная идея Design for testability — иметь возможность в большой программе в любой момент заменить некоторые кусочки, например, на заглушки. Для достижения этой цели приходится бить код на множество небольших классов, создавать много интерфейсов, применять принципы проектирования S.O.L.I.D.

Однако где-то в коде должно быть место, где все это множество небольших классов собирается вместе, инициализируется и нужным образом соединяются. Это обычно делается довольно однообразным и рутинным кодом. Контейнер же предлагает снять с разработчика ответственность за написание этого кода, взяв ее на себя.

После того, как задача создания и начальной инициализации графа объектов переложена на контейнер появляется интересный бонус — можно почти без усилий менять способ, которым нужно инициализировать связи в графе. Если какому-то классу понадобился для своей работы другой класс, просто добавьте параметр конструктора — с остальным контейнер попробует разобраться самостоятельно.

Ещё один бонус — возможность довольно просто добавлять некоторые аспекты в ваш код. Понадобилось, чтобы каждое взаимодействие с базой данных логгировалось? Просто сконфигурируйте контейнер так, чтобы в качестве `IDatabase` он возвращал не `Database`, а `LoggingDatabase`, который является оберткой над `Database`, производящей логгирование. Если все использования БД проходили через контейнер, этого будет достаточно.

== Очень подробно ==
Подробно о DI-контейнерах можно прочитать на просторах интернета. Например, в статье Мартина Фаулера [http://martinfowler.com/articles/injection.html Inversion of Control Containers and the Dependency Injection pattern].

Ещё одно неплохое введение в DI-контейнеры — это видео с презентации Guice — DI-контейнера для Java [http://video.google.com/videoplay?docid=6068447410873108038&ei=RdsIS5WnDqWu2wK-v63fDg Java on Guice: Dependency Injection, the Java Way].

Есть также небольшая статья в википедии [http://en.wikipedia.org/wiki/Dependency_injection Dependency injection], в которой, в частности, можно найти список существующих DI-контейнеров.