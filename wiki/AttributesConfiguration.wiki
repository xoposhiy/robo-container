#summary Конфигурирование контейнера атрибутами

Основным способом конфигурирования контейнера является конфигурирование кодом, используя конструктор контейнера и интерфейс `IContainerConfigurator`. [XmlConfiguration Xml-конфигурирование] и конфигурирование атрибутами имеют несколько ограниченные возможности по сравнению с конфигурированием кодом. Однако иногда конфигурирование атрибутами оказывается более лаконичным и приятным в использовании.

Атрибуты живут в пространстве имен `RoboContainer.Infection`. Такое название призвано подчеркнуть, что каждый раз, когда вы используете классы из этого пространства имен, вы добавляете дополнительные связи (пусть и не очень жесткие) от сборки с `RoboContainer`. В некоторых случаях это может по каким-то причинам оказаться нежелательным.

  * `ContainerConstructorAttribute` — подсказка контейнеру, какой конструктор использовать.
  * `DeclareContractAttribute` — декларирование контракта реализацией
  * `RequireContractAttribute` — требование контракта сервисом или зависимостью

Атрибуты, для конфигурирования реализации:
  * `PluggableAttribute` — определение политики повторного использования реализации
  * `IgnoredPluggableAttribute` — исключение типа из автопоиска реализаций

Атрибуты для конфигурирования сервиса:
  * `PluginAttribute` — определение политики повторного использования сервиса
  * `UsePluggableAttribute` — явное указание используемой реализации для сервиса
  * `DontUsePluggableAttribute` — исключение типа из автопоиска реализаций только для данного сервиса

==Планы на будущее==
Если вы разрабатываете библиотеку классов, то вряд ли вы захотите, чтобы ваша библиотека приобрела зависимость от сборки `RoboContainer.dll`. Это означает, что на данный момент вы  лишены возможности конфигурировать классы библиотеки с помощью атрибутов.

Но давайте помечтаем! Хорошо бы было, если бы библиотека могла разметить свои классы собственными же атрибутами, а контейнер после этого сам бы догадался что означает каждый из её атрибутов. Если у контейнера не получилось догадаться самостоятельно, мы можем даже ему немного помочь, рассказав ему немножко про значение каждого из атрибутов и научив ими пользоваться. Вот было бы прекрасно!

Кажется, что будет относительно несложно воплотить эту идею в жизнь. Это и есть ближайшие планы развития Xml-конфигурирования.