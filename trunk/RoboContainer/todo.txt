+ Низкоуровневое конфигурирование — сканер, который может создать для каждого типа PluginConfiguration и PluggableConfiguration.
+ ScanAllLoadedAssemblies(Func<Assembly, bool> predicate)
+ Поддержка Lazy<T>
+ IEnumerable<T>, IList<T> и прочие должны резолвиться как массивы.
+ Экспорт частей. Если кому-то нужен I, а у одной из зарегистрированных частей такое свойство, помеченное спец-атрибутом, то можно взять I из этого свойства.
+ Контракты
+ Человечный Initialize
+ Отладочная информация: по каким правилам разрешается заданный pluginType.
+ TryGet
+ Primitive arguments
+ Управление журналированием
+ Расширяемый Reuse policy
+ Переработка Lazy. Reuse policy!!!
+ Переработка AddPart и экспорта частей.
+ IDisposable
+ Xml-конфигурирование.
+ Доработка With подчистить TODO-шки.
+ Dependency<IService>().UseInstance(service)

Container Reuse Scope

Больше информации в логе.

Документация

Фасилити / Registry / Module

Сделать экспорт частей из синглтонов. Ворнинги в логе при не экспорте из несинглтонов. Подумать...

Структурированный лог

container.AssertConfigurationIsValid(); ?!?!?!

setter injection
field injection
method injection

клевый интерфейс для получения generic-а если значения его параметров типа известны только в рантайме.
IGenericInterface gi = container.GetGeneric(typeof(IGeneric<,>), object1.GetType(), object2.GetType()).As<IGenericInterface>();
вместо:
IGenericInterface gi = (IGenericInterface)container.Get(typeof(IGeneric<,>).GetGenericTypeDefinition().MakeGeneric(object1.GetType(), object2.GetType());

IgnoreNamespace
IgnoreTypes

Если IA : IB и конфигурация для IB есть, а для IA нет, то при получении IA применяется конфигурация IB ?!? Подумать, правильно ли это.

Оптимизация создания PerRequest-ов.

Оптимизация — построение всех вспомогательных структур данных на этапе конфигурирования.

Разделение этапов конфигурирования и использования. Даст возможность однажды сконфигурировав, быстро создавать чистенький контейнер. Разумно только с Оптимизацией.
